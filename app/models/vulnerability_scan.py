"""
Vulnerability scan models for the testing observability platform.
"""

from datetime import datetime
from typing import Optional, Dict, Any
from sqlalchemy import Column, Integer, String, Text, DateTime, Float, Enum as SQLEnum
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.sql import func
import uuid
import enum

from app.models.base import Base, AuditMixin


class VulnerabilityScanStatus(str, enum.Enum):
    """Vulnerability scan status enumeration."""
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"


class VulnerabilityScan(Base, AuditMixin):
    """Vulnerability scan model for managing security testing runs."""

    __tablename__ = "vulnerability_scans"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)
    name = Column(String(255), nullable=False, index=True)
    description = Column(Text, nullable=True)

    # Scan configuration (stores targets, vulnerabilities, attack_methods)
    target_config = Column(JSONB, nullable=False, default=dict)

    # Scan results (stores all scan results)
    results = Column(JSONB, nullable=True, default=dict)

    # Status tracking
    status = Column(SQLEnum(VulnerabilityScanStatus), default=VulnerabilityScanStatus.PENDING, nullable=False, index=True)
    progress = Column(Float, default=0.0, nullable=True)  # Optional, not actively updated

    # Timing
    started_at = Column(DateTime(timezone=True), nullable=True)
    completed_at = Column(DateTime(timezone=True), nullable=True)

    def __repr__(self):
        return f"<VulnerabilityScan(id={self.id}, name='{self.name}', status={self.status})>"

    def to_dict(self) -> Dict[str, Any]:
        """Convert model to dictionary."""
        return {
            "id": str(self.id),
            "name": self.name,
            "description": self.description,
            "target_config": self.target_config,
            "results": self.results,
            "status": self.status.value if self.status else None,
            "progress": self.progress,
            "started_at": self.started_at.isoformat() if self.started_at else None,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None,
            "created_by": self.created_by,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }