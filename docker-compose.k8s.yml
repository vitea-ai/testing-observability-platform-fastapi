version: '3.8'

services:

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile    
    container_name: eval-api-fastapi
    environment:
      APP_ENV: ${APP_ENV:-integration}
      APP_PORT: 8000
      APP_DATABASE_URL: postgresql://evaladmin:postgres123@host.docker.internal:15432/evaluation_db
      DATABASE_URL: postgresql+asyncpg://evaladmin:postgres123@host.docker.internal:15432/evaluation_db
      APP_EVALUATOR_SERVICE_URL: http://evaluator-service:8001
      APP_DEPLOYMENT_TIER: integration
      APP_ENABLE_AUTHENTICATION: ${APP_ENABLE_AUTHENTICATION:-false}
      APP_ENABLE_AUDIT_LOGGING: ${APP_ENABLE_AUDIT_LOGGING:-true}
      APP_ENABLE_HEALTHCARE_MODE: ${APP_ENABLE_HEALTHCARE_MODE:-true}
      # CORS configuration
      APP_CORS_ORIGINS: ${APP_CORS_ORIGINS:-["http://localhost:3000","http://localhost:3001","http://localhost:8001","http://localhost:8003"]}
      # Guardrails service URLs
      PIIGUARD_SERVICE_URL: http://pii-guard-v2:8080
      SECRETS_DETECTOR_SERVICE_URL: http://secrets-detector:8081
      PROFANITY_GUARD_SERVICE_URL: http://profanity-guardrail:8082
      JAILBREAK_GUARD_SERVICE_URL: http://jailbreak-guard:8086
      # Redis and Celery configuration
      REDIS_URL: redis://:vitea_redis_dev_2024@host.docker.internal:6379/2
      CELERY_BROKER_URL: redis://:vitea_redis_dev_2024@host.docker.internal:6379/3
      CELERY_RESULT_BACKEND: redis://:vitea_redis_dev_2024@host.docker.internal:6379/4
      # OpenTelemetry configuration for observability
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT:-http://host.docker.internal:10318/v1/traces}
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${OTEL_EXPORTER_OTLP_LOGS_ENDPOINT:-http://host.docker.internal:10318/v1/logs}
      OTEL_SERVICE_NAME: testing-observability-platform
      ENABLE_METRICS: "true"
    ports:
      - "8000:8000"
    # External services - no depends_on needed
    # depends_on:
    #   eval-postgres-fastapi:
    #     condition: service_healthy
    #   redis:
    #     condition: service_healthy
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
    networks:
      - vitea-shared-network
    restart: unless-stopped
    command: /app/.venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    labels:
      - "logs.collect=true"
      - "logs.service=testing-observability-platform"

  # AI Evaluator Service (Python) - References separate vitea-evaluators repo
  evaluator-service:
    build:
      context: ../vitea-evaluators
      dockerfile: Dockerfile
    container_name: eval-evaluator-service-fastapi
    volumes:
      - ../vitea-evaluators/app:/app/app
    env_file:
      - ../vitea-evaluators/.env
    environment:
      - LOG_LEVEL=INFO
    ports:
      - "9002:8001"
    networks:
      - vitea-shared-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "logs.collect=true"
      - "logs.service=vitea-evaluator-service"
  
  # Celery Worker for Async Evaluation
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eval-celery-worker
    environment:
      APP_ENV: ${APP_ENV:-integration}
      APP_DATABASE_URL: postgresql://evaladmin:postgres123@host.docker.internal:15432/evaluation_db
      DATABASE_URL: postgresql://evaladmin:postgres123@host.docker.internal:15432/evaluation_db
      REDIS_URL: redis://:vitea_redis_dev_2024@host.docker.internal:6379/2
      CELERY_BROKER_URL: redis://:vitea_redis_dev_2024@host.docker.internal:6379/3
      CELERY_RESULT_BACKEND: redis://:vitea_redis_dev_2024@host.docker.internal:6379/4
      APP_EVALUATOR_SERVICE_URL: http://evaluator-service:8001
    # External services - no depends_on needed
    # depends_on:
    #   eval-postgres-fastapi:
    #     condition: service_healthy
    #   redis:
    #     condition: service_healthy
    volumes:
      - ./app:/app/app:ro
    networks:
      - vitea-shared-network
    restart: unless-stopped
    command: sh -c "cd /app && /app/.venv/bin/celery -A app.workers.celery_app worker --loglevel=info --concurrency=2"
    labels:
      - "logs.collect=true"
      - "logs.service=testing-observability-celery"


networks:
  vitea-shared-network:
    external: true