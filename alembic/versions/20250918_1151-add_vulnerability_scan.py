"""Add VulnerabilityScan model

Revision ID: add_vulnerability_scan
Revises: 20250909_add_task_id_to_evaluations
Create Date: 2025-09-18 11:51:00.000000

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "add_vulnerability_scan"
down_revision: Union[str, Sequence[str], None] = "add_task_id_001"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema - add vulnerability_scans table."""
    # Create enum type for status
    op.execute("CREATE TYPE vulnerabilityscanstatus AS ENUM ('PENDING', 'RUNNING', 'COMPLETED', 'FAILED')")

    # Create vulnerability_scans table
    op.create_table(
        "vulnerability_scans",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("target_config", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("results", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING",
                "RUNNING",
                "COMPLETED",
                "FAILED",
                name="vulnerabilityscanstatus",
                create_type=False
            ),
            nullable=False,
        ),
        sa.Column("progress", sa.Float(), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_by", sa.String(length=255), nullable=True),
        sa.Column("updated_by", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    # Create indexes
    op.create_index(op.f("ix_vulnerability_scans_id"), "vulnerability_scans", ["id"], unique=False)
    op.create_index(op.f("ix_vulnerability_scans_name"), "vulnerability_scans", ["name"], unique=False)
    op.create_index(op.f("ix_vulnerability_scans_status"), "vulnerability_scans", ["status"], unique=False)


def downgrade() -> None:
    """Downgrade schema - remove vulnerability_scans table."""
    # Drop indexes
    op.drop_index(op.f("ix_vulnerability_scans_status"), table_name="vulnerability_scans")
    op.drop_index(op.f("ix_vulnerability_scans_name"), table_name="vulnerability_scans")
    op.drop_index(op.f("ix_vulnerability_scans_id"), table_name="vulnerability_scans")

    # Drop table
    op.drop_table("vulnerability_scans")

    # Drop enum type
    op.execute("DROP TYPE vulnerabilityscanstatus")